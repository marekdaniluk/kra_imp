/**
 * kraimp - kra file import library
 * --------------------------------------------------------
 * Copyright (C) 2024, by Marek Daniluk (@GypsyMagic)
 * This library is distributed under the MIT License.
 */
#include <array>
#include <catch2/catch_test_macros.hpp>
#include <kra_imp/kra_imp.hpp>

constexpr const std::array<unsigned char, 1237> VALID_LAYER_DATA = {
    0x31, 0x32, 0x38, 0x2C, 0x30, 0x2C, 0x4C, 0x5A, 0x46, 0x2C, 0x34, 0x36, 0x38, 0x0A, 0x01, 0x00, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00,
    0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9,
    0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0,
    0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xA8, 0x00, 0x00, 0xFF, 0x40, 0x00, 0xE0, 0x31,
    0xB5, 0x40, 0x3D, 0x20, 0x00, 0xE0, 0x2F, 0x40, 0x20, 0x3A, 0x80, 0x00, 0xE0, 0x2E, 0x40, 0x80, 0x3C, 0x20, 0x00, 0xE0, 0x2D, 0x3F, 0x20, 0x38, 0xA0, 0x00, 0xE0, 0x2D, 0x3F,
    0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9,
    0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0x9E, 0x00, 0x00, 0xF4, 0x40, 0x00, 0xE0, 0x31, 0xAB, 0x40, 0x3D, 0x20, 0x00, 0xE0, 0x2F,
    0x40, 0x20, 0x3A, 0x80, 0x00, 0xE0, 0x2E, 0x40, 0x80, 0x3C, 0x20, 0x00, 0xE0, 0x2D, 0x3F, 0x20, 0x38, 0xA0, 0x00, 0xE0, 0x2D, 0x3F, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0,
    0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00,
    0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0x9E, 0x00, 0x04, 0x08, 0x19, 0x1D, 0x13, 0x03, 0x20, 0xAB, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00,
    0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x07, 0x00, 0x1A, 0x47, 0x77,
    0x88, 0x71, 0x3E, 0x12, 0x20, 0x0A, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x00, 0x16, 0x5B, 0xBB, 0xEB, 0xF3, 0xE8, 0xB2, 0x4D, 0x0F, 0x20, 0x0B, 0x20, 0x00, 0x20, 0x00,
    0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x03, 0x00, 0x38, 0xAF, 0xF6, 0x3F, 0xC0, 0x02, 0xF3, 0x9F, 0x2B, 0x20, 0x0C, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x55, 0xD9, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFE, 0xCB, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x31, 0x32, 0x38, 0x2C, 0x36, 0x34, 0x2C, 0x4C, 0x5A, 0x46, 0x2C,
    0x34, 0x34, 0x37, 0x0A, 0x01, 0x00, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0,
    0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0x01, 0x00,
    0x00, 0xFF, 0xE0, 0x01, 0x00, 0xE0, 0x01, 0x14, 0xE0, 0x22, 0x00, 0xE0, 0x36, 0x3E, 0x00, 0x00, 0xE0, 0x01, 0x40, 0x20, 0x0B, 0xE0, 0x2C, 0x00, 0xA0, 0x81, 0xE0, 0x2C, 0x3B,
    0x60, 0x00, 0x60, 0x40, 0x60, 0x09, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9,
    0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xCE, 0x00, 0x00, 0xF4, 0xE0, 0x01, 0x00, 0xE0, 0x2C,
    0xE1, 0xE0, 0x36, 0x3E, 0x00, 0x00, 0xE0, 0x01, 0x40, 0x20, 0x0B, 0xE0, 0x2C, 0x00, 0xA0, 0x81, 0xE0, 0x2C, 0x3B, 0x60, 0x00, 0x60, 0x40, 0x60, 0x09, 0xE0, 0xF9, 0x00, 0xE0,
    0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00,
    0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xCE, 0x00, 0x02, 0x09, 0x59, 0xDD, 0x5E, 0xFF, 0x03, 0xFE, 0xD1, 0x48, 0x01, 0xE0, 0x2C, 0xE1, 0x03, 0x02, 0x40,
    0xBE, 0xFB, 0x20, 0x40, 0x02, 0xF8, 0xAE, 0x32, 0xE0, 0x2C, 0x3E, 0x0A, 0x00, 0x00, 0x1C, 0x70, 0xD2, 0xF6, 0xFA, 0xF4, 0xC8, 0x63, 0x14, 0x20, 0x0B, 0xE0, 0x2C, 0x00, 0x06,
    0x25, 0x62, 0x99, 0xAC, 0x93, 0x58, 0x1D, 0xE0, 0x2C, 0x3B, 0x60, 0x00, 0x04, 0x13, 0x26, 0x2A, 0x1F, 0x0E, 0x60, 0x09, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00,
    0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9,
    0x00, 0xE0, 0xF9, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00,
    0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x57, 0x65, 0x62, 0x4B, 0x69,
    0x74, 0x46, 0x6F, 0x72, 0x6D, 0x42, 0x6F, 0x75, 0x6E, 0x64, 0x61, 0x72, 0x79, 0x38, 0x69, 0x57, 0x43, 0x70, 0x32, 0x70, 0x6F, 0x39, 0x70, 0x6C, 0x37, 0x50, 0x46, 0x58, 0x48,
    0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x44, 0x69, 0x73, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x66, 0x6F, 0x72, 0x6D, 0x2D, 0x64,
    0x61, 0x74, 0x61, 0x3B, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x63, 0x6D, 0x64, 0x00, 0x0D, 0x0A, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x74, 0x00, 0x00, 0x00,
    0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x57, 0x65, 0x62, 0x4B, 0x69, 0x74, 0x46, 0x6F, 0x72, 0x6D, 0x42, 0x6F, 0x75, 0x6E, 0x64, 0x61, 0x72, 0x79, 0x38, 0x69, 0x57, 0x43, 0x70, 0x32,
    0x70, 0x6F, 0x39, 0x70, 0x6C, 0x37, 0x50, 0x46, 0x58, 0x48, 0x2D, 0x2D, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x30, 0x32, 0x2C, 0x30, 0x78, 0x30, 0x39, 0x2C, 0x30, 0x78, 0x35, 0x39, 0x2C, 0x30, 0x78, 0x44, 0x44, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x30, 0x78, 0x35,
    0x45, 0x2C, 0x30, 0x78, 0x46, 0x46, 0x2C, 0x30, 0x78, 0x30, 0x33, 0x2C, 0x30, 0x78, 0x46, 0x45, 0x2C, 0x30, 0x78, 0x44, 0x31, 0x2C, 0x30, 0x78, 0x34, 0x38, 0x2C, 0x30, 0x78,
    0x30, 0x31, 0x2C, 0x30, 0x78, 0x45, 0x30, 0x2C, 0x30, 0x78, 0x32, 0x43, 0x2C, 0x30, 0x78, 0x45, 0x31, 0x2C, 0x30, 0x78, 0x30, 0x33, 0x2C, 0x30, 0x78, 0x30, 0x32, 0x2C, 0x30,
    0x78, 0x34, 0x30, 0x2C, 0x30, 0x78, 0x42, 0x45, 0x2C, 0x30, 0x78, 0x46, 0x42, 0x2C, 0x30, 0x78, 0x32, 0x30, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x30, 0x78, 0x34, 0x30, 0x2C, 0x30,
    0x78, 0x30, 0x32, 0x2C, 0x30, 0x78, 0x46, 0x38, 0x2C, 0x30, 0x78, 0x41, 0x45, 0x2C, 0x30, 0x78, 0x33, 0x32, 0x2C
};

constexpr const std::array<unsigned char, 1237> INVALID_COMPRESS_FLAG_DATA = {
    0x31, 0x32, 0x38, 0x2C, 0x36, 0x34, 0x2C, 0x4C, 0x5A, 0x46, 0x2C, 0x34, 0x34, 0x37, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9,
    0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xCE, 0x00, 0x00, 0xF4, 0xE0, 0x01, 0x00, 0xE0, 0x2C, 0xE1, 0xE0, 0x36, 0x3E, 0x00, 0x00, 0xE0, 0x01, 0x40, 0x20, 0x0B,
    0xE0, 0x2C, 0x00, 0xA0, 0x81, 0xE0, 0x2C, 0x3B, 0x60, 0x00, 0x60, 0x40, 0x60, 0x09, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9,
    0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00,
    0xE0, 0xCE, 0x00, 0x02, 0x09, 0x59, 0xDD, 0x5E, 0xFF, 0x03, 0xFE, 0xD1, 0x48, 0x01, 0xE0, 0x2C, 0xE1, 0x03, 0x02, 0x40, 0xBE, 0xFB, 0x20, 0x40, 0x02, 0xF8, 0xAE, 0x32,
    0xE0, 0x2C, 0x3E, 0x0A, 0x00, 0x00, 0x1C, 0x70, 0xD2, 0xF6, 0xFA, 0xF4, 0xC8, 0x63, 0x14, 0x20, 0x0B, 0xE0, 0x2C, 0x00, 0x06, 0x25, 0x62, 0x99, 0xAC, 0x93, 0x58, 0x1D,
    0xE0, 0x2C, 0x3B, 0x60, 0x00, 0x04, 0x13, 0x26, 0x2A, 0x1F, 0x0E, 0x60, 0x09, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00,
    0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x57, 0x65, 0x62, 0x4B, 0x69,
    0x74, 0x46, 0x6F, 0x72, 0x6D, 0x42, 0x6F, 0x75, 0x6E, 0x64, 0x61, 0x72, 0x79, 0x38, 0x69, 0x57, 0x43, 0x70, 0x32, 0x70, 0x6F, 0x39, 0x70, 0x6C, 0x37, 0x50, 0x46, 0x58,
    0x48, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x44, 0x69, 0x73, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x66, 0x6F, 0x72, 0x6D,
    0x2D, 0x64, 0x61, 0x74, 0x61, 0x3B, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x63, 0x6D, 0x64, 0x00, 0x0D, 0x0A, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x74,
    0x00, 0x00, 0x00, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x57, 0x65, 0x62, 0x4B, 0x69, 0x74, 0x46, 0x6F, 0x72, 0x6D, 0x42, 0x6F, 0x75, 0x6E, 0x64, 0x61, 0x72, 0x79, 0x38, 0x69,
    0x57, 0x43, 0x70, 0x32, 0x70, 0x6F, 0x39, 0x70, 0x6C, 0x37, 0x50, 0x46, 0x58, 0x48, 0x2D, 0x2D, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x32, 0x2C, 0x30, 0x78, 0x30, 0x39, 0x2C, 0x30, 0x78, 0x35, 0x39, 0x2C, 0x30, 0x78, 0x44, 0x44, 0x2C, 0x0A,
    0x20, 0x20, 0x20, 0x30, 0x78, 0x35, 0x45, 0x2C, 0x30, 0x78, 0x46, 0x46, 0x2C, 0x30, 0x78, 0x30, 0x33, 0x2C, 0x30, 0x78, 0x46, 0x45, 0x2C, 0x30, 0x78, 0x44, 0x31, 0x2C,
    0x30, 0x78, 0x34, 0x38, 0x2C, 0x30, 0x78, 0x30, 0x31, 0x2C, 0x30, 0x78, 0x45, 0x30, 0x2C, 0x30, 0x78, 0x32, 0x43, 0x2C, 0x30, 0x78, 0x45, 0x31, 0x2C, 0x30, 0x78, 0x30,
    0x33, 0x2C, 0x30, 0x78, 0x30, 0x32, 0x2C, 0x30, 0x78, 0x34, 0x30, 0x2C, 0x30, 0x78, 0x42, 0x45, 0x2C, 0x30, 0x78, 0x46, 0x42, 0x2C, 0x30, 0x78, 0x32, 0x30, 0x2C, 0x0A,
    0x20, 0x20, 0x20, 0x30, 0x78, 0x34, 0x30, 0x2C, 0x30, 0x78, 0x30, 0x32, 0x2C, 0x30, 0x78, 0x46, 0x38, 0x2C, 0x30, 0x78, 0x41, 0x45, 0x2C, 0x30, 0x78, 0x33, 0x32, 0x2C
};

constexpr const std::array<unsigned char, 1237> INVALID_COMPRESSED_LAYER_DATA = {
    0x31, 0x32, 0x38, 0x2C, 0x30, 0x2C, 0x4C, 0x5A, 0x46, 0x2C, 0x34, 0x36, 0x38, 0x0A, 0x01, 0x00, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00,
    0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9,
    0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0,
    0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xA8, 0x00, 0x00, 0xFF, 0x40, 0x00, 0xE0, 0x31,
    0xB5, 0x40, 0x3D, 0x20, 0x00, 0xE0, 0x2F, 0x40, 0x20, 0x3A, 0x80, 0x00, 0xE0, 0x2E, 0x40, 0x80, 0x3C, 0x20, 0x00, 0xE0, 0x2D, 0x3F, 0x20, 0x38, 0xA0, 0x00, 0xE0, 0x2D, 0x3F,
    0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9,
    0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0x9E, 0x00, 0x00, 0xF4, 0x40, 0x00, 0xE0, 0x31, 0xAB, 0x40, 0x3D, 0x20, 0x00, 0xE0, 0x2F,
    0x40, 0x20, 0x3A, 0x80, 0x00, 0xE0, 0x2E, 0x40, 0x80, 0x3C, 0x20, 0x00, 0xE0, 0x2D, 0x3F, 0x20, 0x38, 0xA0, 0x00, 0xE0, 0x2D, 0x3F, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0,
    0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00,
    0xE0, 0xF9, 0x00, 0xE0, 0xF9, 0x00, 0xE0, 0x9E, 0x00, 0x04, 0x08, 0x19, 0x1D, 0x13, 0x03, 0x20, 0xAB, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00,
    0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x07, 0x00, 0x1A, 0x47, 0x77,
    0x88, 0x71, 0x3E, 0x12, 0x20, 0x0A, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x0A, 0x00, 0x00, 0x16, 0x5B, 0xBB, 0xEB, 0xF3, 0xE8, 0xB2, 0x4D, 0x0F, 0x20, 0x0B, 0x20, 0x00, 0x20, 0x00,
    0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x03, 0x00, 0x38, 0xAF, 0xF6, 0x3F, 0xC0, 0x02, 0xF3, 0x9F, 0x2B, 0x20, 0x0C, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x55, 0xD9, 0xFE,
    0xFF, 0xFF, 0xFF, 0xFE, 0xCB, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00
};

constexpr const std::string_view EMPTY_LAYER_DATA = "";

TEST_CASE("kra_imp_read_layer_data_tile success", "[layer_data_tile]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    int x_offset, y_offset;
    const kra_imp_error_code_e result = kra_imp_read_layer_data_tile(reinterpret_cast<const char*>(VALID_LAYER_DATA.data()), VALID_LAYER_DATA.size(), 0U, output_buffer.data(),
                                                                     output_buffer.size(), &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_SUCCESS);
    REQUIRE(x_offset == 128);
    REQUIRE(y_offset == 0);
}

TEST_CASE("kra_imp_read_layer_data_tile success second index", "[layer_data_tile]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    int x_offset, y_offset;
    const kra_imp_error_code_e result = kra_imp_read_layer_data_tile(reinterpret_cast<const char*>(VALID_LAYER_DATA.data()), VALID_LAYER_DATA.size(), 1U, output_buffer.data(),
                                                                     output_buffer.size(), &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_SUCCESS);
    REQUIRE(x_offset == 128);
    REQUIRE(y_offset == 64);
}

TEST_CASE("kra_imp_read_layer_data_tile null input buffer", "[layer_data_tile]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    int x_offset, y_offset;
    const kra_imp_error_code_e result = kra_imp_read_layer_data_tile(nullptr, 0ULL, 0U, output_buffer.data(), output_buffer.size(), &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data_tile null output", "[layer_data_tile]")
{
    int x_offset, y_offset;
    const kra_imp_error_code_e result =
        kra_imp_read_layer_data_tile(reinterpret_cast<const char*>(VALID_LAYER_DATA.data()), VALID_LAYER_DATA.size(), 0U, nullptr, 0ULL, &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data_tile null x_offset/y_offset", "[layer_data_tile]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    const kra_imp_error_code_e result = kra_imp_read_layer_data_tile(reinterpret_cast<const char*>(VALID_LAYER_DATA.data()), VALID_LAYER_DATA.size(), 0U, output_buffer.data(),
                                                                     output_buffer.size(), nullptr, nullptr);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data_tile buffer_size=0", "[layer_data_tile]")
{
    std::array<char, 1> output_buffer;
    int x_offset, y_offset;
    const kra_imp_error_code_e result = kra_imp_read_layer_data_tile(nullptr, 0ULL, 0U, output_buffer.data(), output_buffer.size(), &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data_tile empty input buffer", "[layer_data_tile]")
{
    std::array<char, 1> output_buffer;
    int x_offset, y_offset;
    const kra_imp_error_code_e result =
        kra_imp_read_layer_data_tile(EMPTY_LAYER_DATA.data(), EMPTY_LAYER_DATA.size(), 0U, output_buffer.data(), output_buffer.size(), &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data_tile empty output buffer", "[layer_data_tile]")
{
    std::array<char, 0> output_buffer;
    int x_offset, y_offset;
    const kra_imp_error_code_e result =
        kra_imp_read_layer_data_tile(EMPTY_LAYER_DATA.data(), EMPTY_LAYER_DATA.size(), 0U, output_buffer.data(), output_buffer.size(), &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data_tile invalid layer index", "[layer_data_tile]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    int x_offset, y_offset;
    const kra_imp_error_code_e result = kra_imp_read_layer_data_tile(reinterpret_cast<const char*>(VALID_LAYER_DATA.data()), VALID_LAYER_DATA.size(), 2U, output_buffer.data(),
                                                                     output_buffer.size(), &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_PARSE_ERROR);
}

TEST_CASE("kra_imp_read_layer_data_tile invalid layer data", "[layer_data_tile]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    int x_offset, y_offset;
    const kra_imp_error_code_e result = kra_imp_read_layer_data_tile(reinterpret_cast<const char*>(INVALID_COMPRESS_FLAG_DATA.data()), INVALID_COMPRESS_FLAG_DATA.size(), 0U,
                                                                     output_buffer.data(), output_buffer.size(), &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_DECOMPRESS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data_tile invalid layer compressed data", "[layer_data_tile]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    int x_offset, y_offset;
    const kra_imp_error_code_e result = kra_imp_read_layer_data_tile(reinterpret_cast<const char*>(INVALID_COMPRESSED_LAYER_DATA.data()), INVALID_COMPRESSED_LAYER_DATA.size(), 0U,
                                                                     output_buffer.data(), output_buffer.size(), &x_offset, &y_offset);
    REQUIRE(result == KRA_IMP_DECOMPRESS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data success", "[layer_data]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    kra_imp_layer_output_data_t output_data{};
    output_data._buffer = output_buffer.data();
    output_data._buffer_size = output_buffer.size();
    const kra_imp_error_code_e result = kra_imp_read_layer_data(reinterpret_cast<const char*>(VALID_LAYER_DATA.data()), VALID_LAYER_DATA.size(), 0U, &output_data);
    REQUIRE(result == KRA_IMP_SUCCESS);
    REQUIRE(output_data._x_offset == 128);
    REQUIRE(output_data._y_offset == 0);
}

TEST_CASE("kra_imp_read_layer_data success second index", "[layer_data]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    kra_imp_layer_output_data_t output_data{};
    output_data._buffer = output_buffer.data();
    output_data._buffer_size = output_buffer.size();
    const kra_imp_error_code_e result = kra_imp_read_layer_data(reinterpret_cast<const char*>(VALID_LAYER_DATA.data()), VALID_LAYER_DATA.size(), 1U, &output_data);
    REQUIRE(result == KRA_IMP_SUCCESS);
    REQUIRE(output_data._x_offset == 128);
    REQUIRE(output_data._y_offset == 64);
}

TEST_CASE("kra_imp_read_layer_data null input buffer", "[layer_data]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    kra_imp_layer_output_data_t output_data{};
    output_data._buffer = output_buffer.data();
    output_data._buffer_size = output_buffer.size();
    const kra_imp_error_code_e result = kra_imp_read_layer_data(nullptr, 0ULL, 0U, &output_data);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data null output", "[layer_data]")
{
    kra_imp_layer_output_data_t output_data{};
    const kra_imp_error_code_e result = kra_imp_read_layer_data(reinterpret_cast<const char*>(VALID_LAYER_DATA.data()), VALID_LAYER_DATA.size(), 0U, &output_data);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data buffer_size=0", "[layer_data]")
{
    std::array<char, 1> output_buffer;
    kra_imp_layer_output_data_t output_data{};
    output_data._buffer = output_buffer.data();
    output_data._buffer_size = output_buffer.size();
    const kra_imp_error_code_e result = kra_imp_read_layer_data(nullptr, 0ULL, 0U, &output_data);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data empty input buffer", "[layer_data]")
{
    std::array<char, 1> output_buffer;
    kra_imp_layer_output_data_t output_data{};
    output_data._buffer = output_buffer.data();
    output_data._buffer_size = output_buffer.size();
    const kra_imp_error_code_e result = kra_imp_read_layer_data(EMPTY_LAYER_DATA.data(), EMPTY_LAYER_DATA.size(), 0U, &output_data);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data empty output buffer", "[layer_data]")
{
    std::array<char, 0> output_buffer;
    kra_imp_layer_output_data_t output_data{};
    output_data._buffer = output_buffer.data();
    output_data._buffer_size = output_buffer.size();
    const kra_imp_error_code_e result = kra_imp_read_layer_data(EMPTY_LAYER_DATA.data(), EMPTY_LAYER_DATA.size(), 0U, &output_data);
    REQUIRE(result == KRA_IMP_PARAMS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data invalid layer index", "[layer_data]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    kra_imp_layer_output_data_t output_data{};
    output_data._buffer = output_buffer.data();
    output_data._buffer_size = output_buffer.size();
    const kra_imp_error_code_e result = kra_imp_read_layer_data(reinterpret_cast<const char*>(VALID_LAYER_DATA.data()), VALID_LAYER_DATA.size(), 2U, &output_data);
    REQUIRE(result == KRA_IMP_PARSE_ERROR);
}

TEST_CASE("kra_imp_read_layer_data invalid layer data", "[layer_data]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    kra_imp_layer_output_data_t output_data{};
    output_data._buffer = output_buffer.data();
    output_data._buffer_size = output_buffer.size();
    const kra_imp_error_code_e result =
        kra_imp_read_layer_data(reinterpret_cast<const char*>(INVALID_COMPRESS_FLAG_DATA.data()), INVALID_COMPRESS_FLAG_DATA.size(), 0U, &output_data);
    REQUIRE(result == KRA_IMP_DECOMPRESS_ERROR);
}

TEST_CASE("kra_imp_read_layer_data invalid layer compressed data", "[layer_data]")
{
    std::array<char, 64 * 64 * 4> output_buffer;
    kra_imp_layer_output_data_t output_data{};
    output_data._buffer = output_buffer.data();
    output_data._buffer_size = output_buffer.size();
    const kra_imp_error_code_e result =
        kra_imp_read_layer_data(reinterpret_cast<const char*>(INVALID_COMPRESSED_LAYER_DATA.data()), INVALID_COMPRESSED_LAYER_DATA.size(), 0U, &output_data);
    REQUIRE(result == KRA_IMP_DECOMPRESS_ERROR);
}
